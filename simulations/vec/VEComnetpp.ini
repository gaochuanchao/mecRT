[General]
output-scalar-file-append = false 
 
# Network configuration 
network = mecRT.simulations.vec.VEC
sim-time-limit = 900s 
warmup-period = 0s 
#seed-set = ${repetition} 
seed-set = 12345	# set a fixed seed for repeating experiments

#cmdenv-express-mode = true
# record-eventlog = true
# record-eventlog-file = "eventlog_run0.elog"	# the event log file name, for debugging purpose
#**.cmdenv-log-level = "DETAIL"

# Statistics 
#output-scalar-file = ${resultdir}/${configname}/${repetition}.sca 
#output-vector-file = ${resultdir}/${configname}/${repetition}.vec 
**.routingRecorder.enabled = false 
  
# General parameters 
**.amcType = "NRAmc" 
**.targetBler = 0.01 
**.blerShift = 5   
*.configurator.config = xmldoc("./demo.xml") 
 
# Floorplan definition 
**.mobility.constraintAreaMaxX = 1500m 
**.mobility.constraintAreaMaxY = 1500m 
**.mobility.constraintAreaMinX = 0m 
**.mobility.constraintAreaMinY = 0m 
**.mobility.constraintAreaMinZ = 0m 
**.mobility.constraintAreaMaxZ = 0m 
**.mobility.initFromDisplayString = false 

# this violate real network, for accelerating the simulation only
**.lo.mtu = 409600B		# 400KB
**.ip2nic.mtu = 409600B	# 400KB
**.ppp.mtu = 409600B	# 400KB

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 50	# 26
**.eNodeBTxPower = 1000	# 26
**.fbPeriod = 30   # reports CQI every 30ms
**.srsDistanceCheck = true  # enable the checking the distance for SRS transmission
**.srsDistance = 600m  # the distance for SRS transmission, default is 600m

############### CA configuration ################
# the byte rate for 1 RB per TTI with CQI-15 is 144 Bytes
# the profiled data rate using router is about 37MB/s
# 270 resource blocks for one carrier, achieving 37MB/s
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = 18
*.carrierAggregation.componentCarrier[0].numerologyIndex = 0
**.numRbPerBand = 15
#*.bgCell[*].bgScheduler.numBands = 100
#*.bgCell[*].bgScheduler.isNr = true
*.bandManager.numerologyIndex = 0
**.collectSinrStatistics = false

############### Handover #################
#**.enableHandover = true
**.dynamicCellAssociation = true  # at initialize the ue connects to the best cell (based on power)
#**.sctp.nagleEnabled = false 
#**.sctp.enableHeartbeats = false	

############### Read Profiling Data #################
*.database.vehExeDataPath = "./profile/jetson_data.txt"
*.database.rsuExeDataPath = "./profile/server_data.txt"
*.database.rsuPosDataPath = "./traffic/RSU15_xy.txt"
*.database.rsuGraphPath = "./traffic/RSU15_graph.txt"  # the path to store the RSU graph data

# --------------------------------------------------------# 

[Config Uploading]
# base configuration: appCount=1, interval=10, rsAll=true, ratio=1
*.enableInitDebug = true

sim-time-limit = 900s
**.rescheduleAll = true
*.numUe = 2 	# 80
*.numGnb = 1 	# 15
**.srsDistanceCheck = true  # disable the checking the distance for SRS transmission, for testing purpose
**.enableBackhaul = false	# whether to enable the backhaul, default is false
**.fairFactor = 1    # the fairness factor for the scheduler, i.e., 0.4
**.countExeTime = true

############### Scheduler Configuration #################
# Greedy, FastLR, GameTheory, Iterative, SARound for VEC without backhaul network
# FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch for VEC with backhaul network
**.scheduleInterval = 10s	# 5, 10, 15, 20
**.scheduleScheme = "Iterative"
**.offloadOverhead = 0.001s
**.countExeTime = true	# whether to count the execution time of schedule scheme, default is true
**.vecScheduler.localPort = 1000
# **.vecScheduler.srvTimeScale_ = 1.0
# **.vecScheduler.cuStep = 2

# UE configuration 

# connect the UE's NIC (NR side) to the corresponding serving gNB 
*.ue[*].macCellId = 0 
*.ue[*].masterId = 0 
*.ue[*].nrMacCellId = 1 
*.ue[*].nrMasterId = 1 

# Application Setup 
*.ue[*].numApps = 1 # 1, 2
*.ue[*].app[*].schedulerAddr = "scheduler" # obtain the address of the client by reading its index in the array of Apps 
*.ue[*].app[*].schedulerPort = 1000  
*.ue[*].app[*].localPort = 4000 + ancestorIndex(1) * 10 + index	# assume each ue contains no more than 10 apps
*.ue[*].udp.mtu = 409600B	# 400KB, the max transimit unit size, for accelerating simulation
*.ue[*].app[*].dlScale = 1.5    # the scale for the deadline of the app, default is 1.0. dl = dl / dlScale

# GNB configuration 

# gNodeB position 
*.gnb[*].server.localPort = 2000 + ancestorIndex(1)
*.gnb[*].server.schedulerAddr = "scheduler"
*.gnb[*].server.schedulerPort = 1000
*.gnb[*].server.cmpUnitTotal = 20
*.gnb[*].udp.mtu = 409600B	# 400KB, for accelerating simulation 
**.pilotMode = "MEDIAN_CQI"	# "MAX_CQI", "MIN_CQI", "MEDIAN_CQI", "ROBUST_CQI"

# Statistics 
#output-scalar-file = ${resultdir}/${configname}/${scheme}-appCount-1-interval-10-rsAll-true-ratio-1.sca
#output-vector-file = ${resultdir}/${configname}/${scheme}-appCount-1-interval-10-rsAll-true-ratio-1.vec


# --------------------------------------------------------#   
[Config Full-Test-MEC-1]    # MEC without backhaul network, 60 combinations
extends = Uploading

**.enableBackhaul = false	# whether to enable the backhaul, default is false
sim-time-limit = 900s
*.numUe = ${ueCount=80} 	# 80
*.numGnb = ${gnbCount=15} 	# 15
**.srsDistanceCheck = true  # enable the distance checking for SRS transmission
**.fairFactor = 1    # the fairness factor for the scheduler
*.ue[*].app[*].dlScale = 1.5    # the scale for the deadline of the app, default is 1.0. dl = dl / dlScale
**.serverExeScale = 3.0   # the scale for the server execution time for database, default is 1.0

*.ue[*].numApps = ${appCount=3}
**.scheduleScheme = "${scheme=Greedy, FastLR, GameTheory, Iterative, SARound}"	# Greedy, FastLR, GameTheory, Iterative, SARound
**.scheduleInterval = ${interval=10}s	# ${interval=5, 10, 15, 20}s
**.pilotMode = "${pilot=MAX_CQI, MEDIAN_CQI, MIN_CQI}"
**.rescheduleAll = ${rsAll=true, false}	# true, false
**.countExeTime = ${countTime=true, false}	# whether to count the execution time of schedule scheme, default is true

# Statistics 
output-scalar-file = ${resultdir}/${configname}/scheAll-${rsAll}-countExeTime-${countTime}-${scheme}-pilot-${pilot}.sca
output-vector-file = ${resultdir}/${configname}/scheAll-${rsAll}-countExeTime-${countTime}-${scheme}-pilot-${pilot}.vec


# --------------------------------------------------------#   
[Config Full-Test-MEC-2]    # MEC with backhaul network, 32 combinations
extends = Uploading

*.carrierAggregation.componentCarrier[0].numBands = 27
**.numRbPerBand = 10
*.gnb[*].rsuServer.cmpUnitTotal = 30

**.enableBackhaul = true	# whether to enable the backhaul, default is false
sim-time-limit = 900s
*.numUe = ${ueCount=80} 	# 80
*.numGnb = ${gnbCount=15} 	# 15
**.srsDistanceCheck = true  # enable the distance checking for SRS transmission
*.ue[*].app[*].dlScale = 1    # the scale for the deadline of the app, default is 1.0. dl = dl / dlScale

**.fairFactor = ${fairnessFactor=0.17, 0.25}    # 0.17, 0.2, 0.25, 0.5 the fairness factor for the scheduler, 1/6, 1/4
*.ue[*].numApps = ${appCount=4}
**.scheduleScheme = "${scheme=FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch}"	# FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch
**.scheduleInterval = ${interval=10}s	# ${interval=5, 10, 15, 20}s
**.pilotMode = "${pilot=MAX_CQI, MIN_CQI}"     # "MAX_CQI", "MIN_CQI", "MEDIAN_CQI"
**.rescheduleAll = ${rsAll=true, false}	# true, false
**.countExeTime = ${countTime=true}	# whether to count the execution time of schedule scheme, default is true

# Statistics 
output-scalar-file = ${resultdir}/${configname}/scheAll-${rsAll}-factor-${fairnessFactor}-${scheme}-pilot-${pilot}.sca
output-vector-file = ${resultdir}/${configname}/scheAll-${rsAll}-factor-${fairnessFactor}-${scheme}-pilot-${pilot}.vec

[Config Full-Test-MEC-2-05]    # MEC with backhaul network, 16 combinations
extends = Uploading

*.carrierAggregation.componentCarrier[0].numBands = 27
**.numRbPerBand = 10
*.gnb[*].rsuServer.cmpUnitTotal = 30

**.enableBackhaul = true	# whether to enable the backhaul, default is false
sim-time-limit = 900s
*.numUe = ${ueCount=80} 	# 80
*.numGnb = ${gnbCount=15} 	# 15
**.srsDistanceCheck = true  # enable the distance checking for SRS transmission
*.ue[*].app[*].dlScale = 1    # the scale for the deadline of the app, default is 1.0. dl = dl / dlScale

**.fairFactor = ${fairnessFactor=0.5}    # the fairness factor for the scheduler, 1/2
**.vecScheduler.cuStep = 2
**.vecScheduler.rbStep = 2
*.ue[*].numApps = ${appCount=4}
**.scheduleScheme = "${scheme=FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch}"	# FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch
**.scheduleInterval = ${interval=10}s	# ${interval=5, 10, 15, 20}s
**.pilotMode = "${pilot=MAX_CQI, MIN_CQI}"     # "MAX_CQI", "MIN_CQI", "MEDIAN_CQI"
**.rescheduleAll = ${rsAll=true, false}	# true, false
**.countExeTime = ${countTime=true}	# whether to count the execution time of schedule scheme, default is true

# Statistics 
output-scalar-file = ${resultdir}/Full-Test-MEC-2/scheAll-${rsAll}-factor-${fairnessFactor}-${scheme}-pilot-${pilot}.sca
output-vector-file = ${resultdir}/Full-Test-MEC-2/scheAll-${rsAll}-factor-${fairnessFactor}-${scheme}-pilot-${pilot}.vec

# --------------------------------------------------------#   

[Config AppCount-Test-MEC-1]    # MEC without backhaul network, 15 combinations
extends = Uploading

**.enableBackhaul = false	# whether to enable the backhaul, default is false
sim-time-limit = 900s
*.numUe = ${ueCount=80} 	# 80
*.numGnb = ${gnbCount=15} 	# 15
**.srsDistanceCheck = true  # enable the distance checking for SRS transmission
**.fairFactor = 1    # the fairness factor for the scheduler
*.ue[*].app[*].dlScale = 1.5    # the scale for the deadline of the app, default is 1.0. dl = dl / dlScale
**.serverExeScale = 3.0   # the scale for the server execution time for database, default is 1.0

*.ue[*].numApps = ${appCount=2, 3, 4}
**.scheduleScheme = "${scheme=Greedy, FastLR, GameTheory, Iterative, SARound}"	# Greedy, FastLR, GameTheory, Iterative, SARound
**.scheduleInterval = ${interval=10}s	# ${interval=5, 10, 15, 20}s
**.pilotMode = "${pilot=MEDIAN_CQI}"
**.rescheduleAll = ${rsAll=true}	# true, false
**.countExeTime = ${countTime=true}

# Statistics 
output-scalar-file = ${resultdir}/${configname}/scheme-${scheme}-appCount-${appCount}.sca
output-vector-file = ${resultdir}/${configname}/scheme-${scheme}-appCount-${appCount}.vec


# --------------------------------------------------------#   

[Config AppCount-Test-MEC-2]    # MEC without backhaul network, 12 combinations
extends = Uploading

*.carrierAggregation.componentCarrier[0].numBands = 27
**.numRbPerBand = 10
*.gnb[*].rsuServer.cmpUnitTotal = 30

**.enableBackhaul = true	# whether to enable the backhaul, default is false
sim-time-limit = 900s
*.numUe = ${ueCount=80} 	# 80
*.numGnb = ${gnbCount=15} 	# 15
**.srsDistanceCheck = true  # enable the distance checking for SRS transmission
*.ue[*].app[*].dlScale = 1    # 0.667 the scale for the deadline of the app, default is 1.0. dl = dl / dlScale

**.fairFactor = 0.17    # the fairness factor for the scheduler
*.ue[*].numApps = ${appCount=4}  # 2, 3, 4
**.scheduleScheme = "${scheme=FwdGreedy, FwdGameTheory, FwdQuickLR, FwdGraphMatch}"	# Greedy, FastLR, GameTheory, Iterative, SARound
**.scheduleInterval = ${interval=10}s	# ${interval=5, 10, 15, 20}s
**.pilotMode = "${pilot=MAX_CQI}"
**.rescheduleAll = ${rsAll=true}	# true, false
**.countExeTime = ${countTime=true}

# Statistics 
output-scalar-file = ${resultdir}/${configname}/scheme-${scheme}-appCount-${appCount}.sca
output-vector-file = ${resultdir}/${configname}/scheme-${scheme}-appCount-${appCount}.vec

