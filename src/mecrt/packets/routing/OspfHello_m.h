//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/routing/OspfHello.msg.
//

#ifndef __INET__OSPFV2_OSPFHELLO_M_H
#define __INET__OSPFV2_OSPFHELLO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {
namespace ospfv2 {

class OspfHello;

}  // namespace ospfv2
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

#include "inet/routing/ospf_common/OspfPacketBase_m.h" // import inet.routing.ospf_common.OspfPacketBase

#include "inet/transportlayer/common/CrcMode_m.h" // import inet.transportlayer.common.CrcMode


namespace inet {
namespace ospfv2 {

// cplusplus {{
using namespace ospf;
// }}

/**
 * Class generated from <tt>mecrt/packets/routing/OspfHello.msg:28</tt> by opp_msgtool.
 * <pre>
 * class OspfHello extends ospf::OspfPacketBase
 * {
 *     type = HELLO_PACKET;
 *     version = 2;
 * }
 * </pre>
 */
class OspfHello : public ::inet::ospf::OspfPacketBase
{
  protected:

  private:
    void copy(const OspfHello& other);

  protected:
    bool operator==(const OspfHello&) = delete;

  public:
    OspfHello();
    OspfHello(const OspfHello& other);
    virtual ~OspfHello();
    OspfHello& operator=(const OspfHello& other);
    virtual OspfHello *dup() const override {return new OspfHello(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OspfHello& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OspfHello& obj) {obj.parsimUnpack(b);}


}  // namespace ospfv2
}  // namespace inet


namespace omnetpp {

template<> inline inet::ospfv2::OspfHello *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ospfv2::OspfHello*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__OSPFV2_OSPFHELLO_M_H

