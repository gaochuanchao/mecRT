//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/routing/OspfLsa.msg.
//

#ifndef __OSPFLSA_M_H
#define __OSPFLSA_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class OspfLsa;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address

/**
 * Class generated from <tt>mecrt/packets/routing/OspfLsa.msg:20</tt> by opp_msgtool.
 * <pre>
 * class OspfLsa extends inet::FieldsChunk
 * {
 *     inet::Ipv4Address origin;
 *     uint32 seqNum;
 *     simtime_t installTime;
 *     inet::Ipv4Address neighbor[]; // neighbor IP addresses
 *     double cost[];                // corresponding costs
 * 
 *     chunkLength = inet::B(12); // base + origin + neighbor + cost
 * }
 * </pre>
 */
class OspfLsa : public ::inet::FieldsChunk
{
  protected:
    inet::Ipv4Address origin;
    uint32_t seqNum = 0;
    omnetpp::simtime_t installTime = SIMTIME_ZERO;
    inet::Ipv4Address *neighbor = nullptr;
    size_t neighbor_arraysize = 0;
    double *cost = nullptr;
    size_t cost_arraysize = 0;

  private:
    void copy(const OspfLsa& other);

  protected:
    bool operator==(const OspfLsa&) = delete;

  public:
    OspfLsa();
    OspfLsa(const OspfLsa& other);
    virtual ~OspfLsa();
    OspfLsa& operator=(const OspfLsa& other);
    virtual OspfLsa *dup() const override {return new OspfLsa(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::Ipv4Address& getOrigin() const;
    virtual inet::Ipv4Address& getOriginForUpdate() { handleChange();return const_cast<inet::Ipv4Address&>(const_cast<OspfLsa*>(this)->getOrigin());}
    virtual void setOrigin(const inet::Ipv4Address& origin);

    virtual uint32_t getSeqNum() const;
    virtual void setSeqNum(uint32_t seqNum);

    virtual omnetpp::simtime_t getInstallTime() const;
    virtual void setInstallTime(omnetpp::simtime_t installTime);

    virtual void setNeighborArraySize(size_t size);
    virtual size_t getNeighborArraySize() const;
    virtual const inet::Ipv4Address& getNeighbor(size_t k) const;
    virtual inet::Ipv4Address& getNeighborForUpdate(size_t k) { handleChange();return const_cast<inet::Ipv4Address&>(const_cast<OspfLsa*>(this)->getNeighbor(k));}
    virtual void setNeighbor(size_t k, const inet::Ipv4Address& neighbor);
    virtual void insertNeighbor(size_t k, const inet::Ipv4Address& neighbor);
    [[deprecated]] void insertNeighbor(const inet::Ipv4Address& neighbor) {appendNeighbor(neighbor);}
    virtual void appendNeighbor(const inet::Ipv4Address& neighbor);
    virtual void eraseNeighbor(size_t k);

    virtual void setCostArraySize(size_t size);
    virtual size_t getCostArraySize() const;
    virtual double getCost(size_t k) const;
    virtual void setCost(size_t k, double cost);
    virtual void insertCost(size_t k, double cost);
    [[deprecated]] void insertCost(double cost) {appendCost(cost);}
    virtual void appendCost(double cost);
    virtual void eraseCost(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OspfLsa& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OspfLsa& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline OspfLsa *fromAnyPtr(any_ptr ptr) { return check_and_cast<OspfLsa*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __OSPFLSA_M_H

