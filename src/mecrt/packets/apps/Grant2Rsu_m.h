//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/apps/Grant2Rsu.msg.
//

#ifndef __GRANT2RSU_M_H
#define __GRANT2RSU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Grant2Rsu;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>mecrt/packets/apps/Grant2Rsu.msg:20</tt> by opp_msgtool.
 * <pre>
 * class Grant2Rsu extends inet::FieldsChunk
 * {
 *     unsigned int appId;				// the application id of the vehicle, 4 bytes
 *     unsigned short resourceType;	// the resource type of the server	(e.g., "GPU"), 2 bytes
 *     unsigned short service;			// the service name, 2 bytes
 *     unsigned short processGnbId;	// the id of processing gNB, 2 bytes
 *     unsigned short offloadGnbId;	// the id of offloading gNB, 2 bytes
 *     int cmpUnits;			// allocated computing units, 4 bytes
 *     int bands;		    // allocated number of bands, 4 bytes
 *     simtime_t exeTime;	// the time needed for app processing in seconds
 *     simtime_t maxOffloadTime;	// the max offload time result in positive saved energy
 *     simtime_t deadline;				// application deadline, 8 bytes
 *     int outputSize;		// result size in bytes, 4 bytes
 *     int inputSize;		// input size in bytes, 4 bytes
 *     bool start;
 *     bool stop;
 * 
 *     chunkLength = inet::B(40);
 * }
 * </pre>
 */
class Grant2Rsu : public ::inet::FieldsChunk
{
  protected:
    unsigned int appId = 0;
    unsigned short resourceType = 0;
    unsigned short service = 0;
    unsigned short processGnbId = 0;
    unsigned short offloadGnbId = 0;
    int cmpUnits = 0;
    int bands = 0;
    omnetpp::simtime_t exeTime = SIMTIME_ZERO;
    omnetpp::simtime_t maxOffloadTime = SIMTIME_ZERO;
    omnetpp::simtime_t deadline = SIMTIME_ZERO;
    int outputSize = 0;
    int inputSize = 0;
    bool start = false;
    bool stop = false;

  private:
    void copy(const Grant2Rsu& other);

  protected:
    bool operator==(const Grant2Rsu&) = delete;

  public:
    Grant2Rsu();
    Grant2Rsu(const Grant2Rsu& other);
    virtual ~Grant2Rsu();
    Grant2Rsu& operator=(const Grant2Rsu& other);
    virtual Grant2Rsu *dup() const override {return new Grant2Rsu(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getAppId() const;
    virtual void setAppId(unsigned int appId);

    virtual unsigned short getResourceType() const;
    virtual void setResourceType(unsigned short resourceType);

    virtual unsigned short getService() const;
    virtual void setService(unsigned short service);

    virtual unsigned short getProcessGnbId() const;
    virtual void setProcessGnbId(unsigned short processGnbId);

    virtual unsigned short getOffloadGnbId() const;
    virtual void setOffloadGnbId(unsigned short offloadGnbId);

    virtual int getCmpUnits() const;
    virtual void setCmpUnits(int cmpUnits);

    virtual int getBands() const;
    virtual void setBands(int bands);

    virtual omnetpp::simtime_t getExeTime() const;
    virtual void setExeTime(omnetpp::simtime_t exeTime);

    virtual omnetpp::simtime_t getMaxOffloadTime() const;
    virtual void setMaxOffloadTime(omnetpp::simtime_t maxOffloadTime);

    virtual omnetpp::simtime_t getDeadline() const;
    virtual void setDeadline(omnetpp::simtime_t deadline);

    virtual int getOutputSize() const;
    virtual void setOutputSize(int outputSize);

    virtual int getInputSize() const;
    virtual void setInputSize(int inputSize);

    virtual bool getStart() const;
    virtual void setStart(bool start);

    virtual bool getStop() const;
    virtual void setStop(bool stop);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Grant2Rsu& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Grant2Rsu& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Grant2Rsu *fromAnyPtr(any_ptr ptr) { return check_and_cast<Grant2Rsu*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __GRANT2RSU_M_H

