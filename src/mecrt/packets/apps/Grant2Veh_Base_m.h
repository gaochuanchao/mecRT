//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/apps/Grant2Veh_Base.msg.
//

#ifndef __GRANT2VEH_BASE_M_H
#define __GRANT2VEH_BASE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Grant2Veh_Base;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>mecrt/packets/apps/Grant2Veh_Base.msg:22</tt> by opp_msgtool.
 * <pre>
 * class Grant2Veh_Base extends inet::FieldsChunk
 * {
 *     unsigned int appId;				// the application id of the vehicle, 4 bytes
 *     uint32 ueAddr;			// the IP address of the vehicle, 4 bytes
 *     simtime_t maxOffloadTime;		// maximum offloading time in seconds, 8 bytes
 *     int bands;			// allocated number of bands, 4 bytes
 *     unsigned short processGnbId;	// the id of processing gNB, 2 bytes
 *     unsigned short offloadGnbId;	// the id of offloading gNB,
 *     uint32 processGnbAddr;	// the ipv4 address of processing gNB, 4 bytes
 *     int processGnbPort;		// rsu server port, 4 bytes
 *     int inputSize;		// application input size, 4 bytes
 *     int outputSize;		// application output size, 4 bytes
 *     int bytePerTTI;		// granted bytes can be transferred within each TTI
 * 
 *     chunkLength = inet::B(40);
 * }
 * </pre>
 */
class Grant2Veh_Base : public ::inet::FieldsChunk
{
  protected:
    unsigned int appId = 0;
    uint32_t ueAddr = 0;
    omnetpp::simtime_t maxOffloadTime = SIMTIME_ZERO;
    int bands = 0;
    unsigned short processGnbId = 0;
    unsigned short offloadGnbId = 0;
    uint32_t processGnbAddr = 0;
    int processGnbPort = 0;
    int inputSize = 0;
    int outputSize = 0;
    int bytePerTTI = 0;

  private:
    void copy(const Grant2Veh_Base& other);

  protected:
    bool operator==(const Grant2Veh_Base&) = delete;

  public:
    Grant2Veh_Base();
    Grant2Veh_Base(const Grant2Veh_Base& other);
    virtual ~Grant2Veh_Base();
    Grant2Veh_Base& operator=(const Grant2Veh_Base& other);
    virtual Grant2Veh_Base *dup() const override {return new Grant2Veh_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getAppId() const;
    virtual void setAppId(unsigned int appId);

    virtual uint32_t getUeAddr() const;
    virtual void setUeAddr(uint32_t ueAddr);

    virtual omnetpp::simtime_t getMaxOffloadTime() const;
    virtual void setMaxOffloadTime(omnetpp::simtime_t maxOffloadTime);

    virtual int getBands() const;
    virtual void setBands(int bands);

    virtual unsigned short getProcessGnbId() const;
    virtual void setProcessGnbId(unsigned short processGnbId);

    virtual unsigned short getOffloadGnbId() const;
    virtual void setOffloadGnbId(unsigned short offloadGnbId);

    virtual uint32_t getProcessGnbAddr() const;
    virtual void setProcessGnbAddr(uint32_t processGnbAddr);

    virtual int getProcessGnbPort() const;
    virtual void setProcessGnbPort(int processGnbPort);

    virtual int getInputSize() const;
    virtual void setInputSize(int inputSize);

    virtual int getOutputSize() const;
    virtual void setOutputSize(int outputSize);

    virtual int getBytePerTTI() const;
    virtual void setBytePerTTI(int bytePerTTI);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Grant2Veh_Base& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Grant2Veh_Base& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Grant2Veh_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Grant2Veh_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __GRANT2VEH_BASE_M_H

