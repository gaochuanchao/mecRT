//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/apps/ServiceStatus.msg.
//

#ifndef __SERVICESTATUS_M_H
#define __SERVICESTATUS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ServiceStatus;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>mecrt/packets/apps/ServiceStatus.msg:23</tt> by opp_msgtool.
 * <pre>
 * class ServiceStatus extends inet::FieldsChunk
 * {
 *     unsigned int appId;				// the application id of the vehicle, 4 bytes
 *     unsigned short processGnbId;	// the id of processing gNB, 2 bytes
 *     unsigned short offloadGnbId;	// the id of offloading gNB, 2 bytes
 *     int processGnbPort;	// the port of processing gNB, 4 bytes
 *     bool success;					// if the initialization successd, 1 bytes
 *     int grantedBand;	// the bands granted by the scheduler, 4 bytes
 *     int usedBand;		// the actual band used by the AP, 4 bytes
 *     int availBand;		// the remaining available bands in the AP, 4 bytes
 *     int availCmpUnit;	// the remaining available bands in the RSU server, 4 bytes
 *     simtime_t offloadGnbRbUpdateTime; // the time when the offloading gNB updated its RBs, 8 bytes
 *     simtime_t processGnbCuUpdateTime; // the time when the processing gNB updated its computing units, 8 bytes
 * 
 *     chunkLength = inet::B(34);
 * }
 * </pre>
 */
class ServiceStatus : public ::inet::FieldsChunk
{
  protected:
    unsigned int appId = 0;
    unsigned short processGnbId = 0;
    unsigned short offloadGnbId = 0;
    int processGnbPort = 0;
    bool success = false;
    int grantedBand = 0;
    int usedBand = 0;
    int availBand = 0;
    int availCmpUnit = 0;
    omnetpp::simtime_t offloadGnbRbUpdateTime = SIMTIME_ZERO;
    omnetpp::simtime_t processGnbCuUpdateTime = SIMTIME_ZERO;

  private:
    void copy(const ServiceStatus& other);

  protected:
    bool operator==(const ServiceStatus&) = delete;

  public:
    ServiceStatus();
    ServiceStatus(const ServiceStatus& other);
    virtual ~ServiceStatus();
    ServiceStatus& operator=(const ServiceStatus& other);
    virtual ServiceStatus *dup() const override {return new ServiceStatus(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getAppId() const;
    virtual void setAppId(unsigned int appId);

    virtual unsigned short getProcessGnbId() const;
    virtual void setProcessGnbId(unsigned short processGnbId);

    virtual unsigned short getOffloadGnbId() const;
    virtual void setOffloadGnbId(unsigned short offloadGnbId);

    virtual int getProcessGnbPort() const;
    virtual void setProcessGnbPort(int processGnbPort);

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual int getGrantedBand() const;
    virtual void setGrantedBand(int grantedBand);

    virtual int getUsedBand() const;
    virtual void setUsedBand(int usedBand);

    virtual int getAvailBand() const;
    virtual void setAvailBand(int availBand);

    virtual int getAvailCmpUnit() const;
    virtual void setAvailCmpUnit(int availCmpUnit);

    virtual omnetpp::simtime_t getOffloadGnbRbUpdateTime() const;
    virtual void setOffloadGnbRbUpdateTime(omnetpp::simtime_t offloadGnbRbUpdateTime);

    virtual omnetpp::simtime_t getProcessGnbCuUpdateTime() const;
    virtual void setProcessGnbCuUpdateTime(omnetpp::simtime_t processGnbCuUpdateTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceStatus& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceStatus& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ServiceStatus *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceStatus*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SERVICESTATUS_M_H

