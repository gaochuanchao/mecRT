//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/apps/VecPacket.msg.
//

#ifndef __VECPACKET_M_H
#define __VECPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class JobPacket;
class VecRequest;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>mecrt/packets/apps/VecPacket.msg:15</tt> by opp_msgtool.
 * <pre>
 * class JobPacket extends inet::FieldsChunk
 * {
 *     int nframes;
 *     int IDframe;
 *     simtime_t absDeadline;
 *     simtime_t jobInitTimestamp;
 *     int inputSize;
 *     int outputSize;
 *     unsigned int appId;	// the unique id of this application, 4 bytes
 * }
 * </pre>
 */
class JobPacket : public ::inet::FieldsChunk
{
  protected:
    int nframes = 0;
    int IDframe = 0;
    omnetpp::simtime_t absDeadline = SIMTIME_ZERO;
    omnetpp::simtime_t jobInitTimestamp = SIMTIME_ZERO;
    int inputSize = 0;
    int outputSize = 0;
    unsigned int appId = 0;

  private:
    void copy(const JobPacket& other);

  protected:
    bool operator==(const JobPacket&) = delete;

  public:
    JobPacket();
    JobPacket(const JobPacket& other);
    virtual ~JobPacket();
    JobPacket& operator=(const JobPacket& other);
    virtual JobPacket *dup() const override {return new JobPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNframes() const;
    virtual void setNframes(int nframes);

    virtual int getIDframe() const;
    virtual void setIDframe(int IDframe);

    virtual omnetpp::simtime_t getAbsDeadline() const;
    virtual void setAbsDeadline(omnetpp::simtime_t absDeadline);

    virtual omnetpp::simtime_t getJobInitTimestamp() const;
    virtual void setJobInitTimestamp(omnetpp::simtime_t jobInitTimestamp);

    virtual int getInputSize() const;
    virtual void setInputSize(int inputSize);

    virtual int getOutputSize() const;
    virtual void setOutputSize(int outputSize);

    virtual unsigned int getAppId() const;
    virtual void setAppId(unsigned int appId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const JobPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, JobPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>mecrt/packets/apps/VecPacket.msg:25</tt> by opp_msgtool.
 * <pre>
 * class VecRequest extends inet::FieldsChunk
 * {
 *     int inputSize;			// input data size of the job, 4 bytes
 *     int outputSize = 0;		// output data size, 4 bytes
 *     simtime_t period;			// the deadline of single job or period of periodic task, 8 bytes
 *     unsigned short resourceType;	// whether using GPU or CPU, 2 bytes
 *     unsigned short service;			// the service name, 2 bytes
 *     unsigned int appId;	// the unique id of this application, 4 bytes
 *     simtime_t stopTime;	// the time that this application stops
 *     double energy;	// the energy consumed by processing an application locally
 *     double offloadPower;	// the offloading power of the Gnb
 *     chunkLength = inet::B(40);
 * }
 * </pre>
 */
class VecRequest : public ::inet::FieldsChunk
{
  protected:
    int inputSize = 0;
    int outputSize = 0;
    omnetpp::simtime_t period = SIMTIME_ZERO;
    unsigned short resourceType = 0;
    unsigned short service = 0;
    unsigned int appId = 0;
    omnetpp::simtime_t stopTime = SIMTIME_ZERO;
    double energy = 0;
    double offloadPower = 0;

  private:
    void copy(const VecRequest& other);

  protected:
    bool operator==(const VecRequest&) = delete;

  public:
    VecRequest();
    VecRequest(const VecRequest& other);
    virtual ~VecRequest();
    VecRequest& operator=(const VecRequest& other);
    virtual VecRequest *dup() const override {return new VecRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getInputSize() const;
    virtual void setInputSize(int inputSize);

    virtual int getOutputSize() const;
    virtual void setOutputSize(int outputSize);

    virtual omnetpp::simtime_t getPeriod() const;
    virtual void setPeriod(omnetpp::simtime_t period);

    virtual unsigned short getResourceType() const;
    virtual void setResourceType(unsigned short resourceType);

    virtual unsigned short getService() const;
    virtual void setService(unsigned short service);

    virtual unsigned int getAppId() const;
    virtual void setAppId(unsigned int appId);

    virtual omnetpp::simtime_t getStopTime() const;
    virtual void setStopTime(omnetpp::simtime_t stopTime);

    virtual double getEnergy() const;
    virtual void setEnergy(double energy);

    virtual double getOffloadPower() const;
    virtual void setOffloadPower(double offloadPower);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VecRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VecRequest& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline JobPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<JobPacket*>(ptr.get<cObject>()); }
template<> inline VecRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<VecRequest*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VECPACKET_M_H

