//
// Generated file, do not edit! Created by opp_msgtool 6.0 from mecrt/packets/apps/RsuFeedback.msg.
//

#ifndef __RSUFEEDBACK_M_H
#define __RSUFEEDBACK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class RsuFeedback;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>mecrt/packets/apps/RsuFeedback.msg:18</tt> by opp_msgtool.
 * <pre>
 * class RsuFeedback extends inet::FieldsChunk
 * {
 *     // ===== specified in the gNB MAC stack ===========
 *     int gnbId;	// MacNodeId of gNB, 2 bytes
 *     int vehId;	// MacNodeId of UE, 2 bytes
 *     int serverPort;			// the port id of the server app within the gNB, 2 bytes
 *     double frequency; 		// carrier frequency, 4 bytes
 *     int bytePerBand;	// bytes that can be delived within 1 TTI for each band, 4 bytes
 *     int availBands;	// number of bands, 2 bytes
 *     int totalBands;	// total bands can be used for scheduling, 2 bytes
 * 
 *     // ===== specified in the server app of the gNB ===========
 *     int freeCmpUnits;	// the available computing units in the RSU server, 2 bytes
 *     int totalCmpUnits;	// total computing units in the RSU server, 2 bytes
 *     unsigned short deviceType;			// the device type of the server (e.g., "RTX3090"), 2 bytes
 *     unsigned short resourceType;		// the resource type of the server	(e.g., "GPU"), 2 bytes
 * 
 *     simtime_t bandUpdateTime; // the time when the bands were updated, 8 bytes
 *     simtime_t cmpUnitUpdateTime; // the time when the computing units were updated, 8 bytes
 * 
 *     chunkLength = inet::B(44);
 * }
 * </pre>
 */
class RsuFeedback : public ::inet::FieldsChunk
{
  protected:
    int gnbId = 0;
    int vehId = 0;
    int serverPort = 0;
    double frequency = 0;
    int bytePerBand = 0;
    int availBands = 0;
    int totalBands = 0;
    int freeCmpUnits = 0;
    int totalCmpUnits = 0;
    unsigned short deviceType = 0;
    unsigned short resourceType = 0;
    omnetpp::simtime_t bandUpdateTime = SIMTIME_ZERO;
    omnetpp::simtime_t cmpUnitUpdateTime = SIMTIME_ZERO;

  private:
    void copy(const RsuFeedback& other);

  protected:
    bool operator==(const RsuFeedback&) = delete;

  public:
    RsuFeedback();
    RsuFeedback(const RsuFeedback& other);
    virtual ~RsuFeedback();
    RsuFeedback& operator=(const RsuFeedback& other);
    virtual RsuFeedback *dup() const override {return new RsuFeedback(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getGnbId() const;
    virtual void setGnbId(int gnbId);

    virtual int getVehId() const;
    virtual void setVehId(int vehId);

    virtual int getServerPort() const;
    virtual void setServerPort(int serverPort);

    virtual double getFrequency() const;
    virtual void setFrequency(double frequency);

    virtual int getBytePerBand() const;
    virtual void setBytePerBand(int bytePerBand);

    virtual int getAvailBands() const;
    virtual void setAvailBands(int availBands);

    virtual int getTotalBands() const;
    virtual void setTotalBands(int totalBands);

    virtual int getFreeCmpUnits() const;
    virtual void setFreeCmpUnits(int freeCmpUnits);

    virtual int getTotalCmpUnits() const;
    virtual void setTotalCmpUnits(int totalCmpUnits);

    virtual unsigned short getDeviceType() const;
    virtual void setDeviceType(unsigned short deviceType);

    virtual unsigned short getResourceType() const;
    virtual void setResourceType(unsigned short resourceType);

    virtual omnetpp::simtime_t getBandUpdateTime() const;
    virtual void setBandUpdateTime(omnetpp::simtime_t bandUpdateTime);

    virtual omnetpp::simtime_t getCmpUnitUpdateTime() const;
    virtual void setCmpUnitUpdateTime(omnetpp::simtime_t cmpUnitUpdateTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RsuFeedback& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RsuFeedback& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline RsuFeedback *fromAnyPtr(any_ptr ptr) { return check_and_cast<RsuFeedback*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RSUFEEDBACK_M_H

